#! /usr/bin/env python

import os
import random
import string
import sys

try:
  import ConfigParser as configparser
except ImportError:
  import configparser

try:
  import boto3
  import botocore
except ImportError:
  print('The boto3 python library is not installed. Please install it with `pip install boto3` and try again.')
  sys.exit(1)


USAGE = '''aws-mfa profile-name mfa-code [session-name]

Performs authentication to AWS and invokes STS to assume a role,
obtaining temporary credentials that can be used to authorize
further actions.

Parameters:
  * profile-name - required - The name of the profile in $HOME/.aws/config or $HOME/.aws/credentials to assume.
  * mfa-code     - required - An MFA token generated by your MFA device.
  * session-name - optional - A name for the session created. Will be randomly generated if not present.
'''

SESSION_NAME_LEN = 8


def generate_session_name(num_bytes):
  '''Generate a number of random bytes and convert them to an ascii alpha-numeric string'''

  alphabet = string.ascii_lowercase + string.ascii_uppercase + string.digits
  return ''.join([random.choice(alphabet) for _ in range(num_bytes)])


def config_get(cfg_parser, section, config_param):
  '''Attempts to read a config_param from a ConfigParser under a particular section.
  Will try to read from sections "profile {section}", "{section}", "profile default" and "default" in that order.
  If config_param isn't found in any of those sections, `None` is returned.
  '''

  section_names = ['profile {}'.format(section), section, 'profile default', 'default']
  for section_name in section_names:
    try:
      return cfg_parser.get(section_name, config_param)
    except configparser.NoOptionError:
      pass

  return None


def main():
  try:
    [profile_name, mfa_code] = sys.argv[1:3]
  except ValueError:
    print(USAGE)
    sys.exit(1)

  if len(sys.argv) >= 4:
    session_name = sys.argv[3]
  else:
    session_name = generate_session_name(SESSION_NAME_LEN)

  config = configparser.ConfigParser()
  config.read([
    os.sep.join([os.environ['HOME'], '.aws', 'credentials']),
    os.sep.join([os.environ['HOME'], '.aws', 'config'])
  ])

  role_arn = config_get(config, profile_name, 'role_arn')
  mfa_serial = config_get(config, profile_name, 'mfa_serial')
  
  if role_arn is None:
    print('Could not find a "role_arn" for profile {0}'.format(profile_name))
    sys.exit(1)
  if mfa_serial is None:
    print('Could not find an "mfa_serial" for profile {0}'.format(profile_name))
    sys.exit(1)

  client = boto3.client('sts')

  try:
    response = client.assume_role(
      RoleArn=role_arn,
      SerialNumber=mfa_serial,
      RoleSessionName=session_name,
      TokenCode=mfa_code)
  except botocore.exceptions.ClientError:
    print('The MFA token you supplied is no longer valid. Please try again with a new token.')
    sys.exit(1)

  output_fmt = 'export AWS_ACCESS_KEY_ID={0}\nexport AWS_SECRET_ACCESS_KEY={1}\nexport AWS_SESSION_TOKEN={2}'
  print(output_fmt.format(
    response['Credentials']['AccessKeyId'],
    response['Credentials']['SecretAccessKey'],
    response['Credentials']['SessionToken']))


if __name__ == '__main__':
  main()
